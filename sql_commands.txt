           SQL Facts
? SQL stands for Structured Query Language
? SQL is pronounced “sequel”
? SQL is declarative language
? SQL is used to access & manipulate data in databases
? Top SQL DBs are MS SQL Server, Oracle, DB2, and MySQL

--------------------------------------------------------
       Database Definitions
? RDBMS (Relational Database Management System) –
Software that stores and manipulates data arranged in
relational database tables.

? Table – A set of data arranged in columns and rows. The
columns represent characteristics of stored data and the
rows represent actual data entries.

---------------------------------------------------------
      SQL Commands Categories
Data Query Language (DQL)
? SELECT - Retrieve data from table(s)
Data Manipulation Language (DML)
? INSERT - Insert data into db table
? UPDATE - Update data in db table
? DELETE - Delete data from table
Data Definition Language (DDL)
? CREATE - Create db object (table, view, etc.)
? ALTER - Modify db object (table, view, etc.)
? DROP - Delete db object (table, view, etc.)
Data Control Language (DCL)
? GRANT - Assign privilege
? REVOKE - remove privilege

---------------------------------------------------------

      How to select data from a table

SELECT <Column List>
FROM <Table Name>
WHERE <Search Condition>

Example:
SELECT FirstName, LastName, OrderDate
FROM Orders WHERE OrderDate > '10/10/2010'

---------------------------------------------------------

      How to insert data in a table

INSERT INTO <Table Name>
(<Column List>) VALUES (<Values>)

Example:
INSERT INTO Orders
(FirstName, LastName, OrderDate) VALUES
('John', 'Smith', '10/10/2010')

---------------------------------------------------------

      How to update data in a table

UPDATE <Table Name>
SET <Column1> = <Value1>, <Column2> = <Value2>, …
WHERE <Search Condition>

Example:
UPDATE Orders
SET FirstName = 'John', LastName = 'Who' WHERE LastName='Wo'

----------------------------------------------------------

       How to delete data from a table

DELETE FROM <Table Name>
WHERE <Search Condition>

Example:
DELETE FROM Orders
WHERE OrderDate < '10/10/2010'

-----------------------------------------------------------

      How to group data and use aggregates

SELECT <Column List>, <Aggregate Function>(<Column Name>)
FROM <Table Name>
WHERE <Search Condition>
GROUP BY <Column List>

Example:
SELECT LastName, SUM(OrderValue)
FROM Orders
WHERE OrderDate > '10/10/2010'
GROUP BY LastName

------------------------------------------------------------

       How to order data

SELECT <Column List>
FROM <Table Name>
WHERE <Search Condition>
ORDER BY <Column List>

Example:
SELECT FirstName, LastName, OrderDate
FROM Orders
WHERE OrderDate > '10/10/2010'
ORDER BY OrderDate

-------------------------------------------------------------

       How to select data from more than one table

SELECT <Column List>
FROM <Table1> JOIN <Table2>
ON <Table1>.<Column1> = <Table2>.<Column1>

Example:
SELECT Orders.LastName, Countries.CountryName
FROM Orders JOIN Countries ON
Orders.CountryID = Countries.ID

-------------------------------------------------------------

        Using UNION

SELECT <Column List> FROM <Table1>
UNION
SELECT <Column List> FROM <Table2>

Example:
SELECT FirstName, LastName FROM Orders2010
UNION
SELECT FirstName, LastName FROM Orders2011

-------------------------------------------------------------

              CREATE 

CREATE TABLE <Table Name>
( Column1 DataType,
 Column2 DataType,
 Column3 DataType,
 …. )


EXAMPLE :

CREATE TABLE Orders
( FirstName CHAR(100),
 LastName CHAR(100),
 OrderDate DATE,
 OrderValue Currency )
---------------------------------------------------------------

              SQL JOINs

The syntax of an SQL JOIN is:

SELECT * 
FROM table1
JOIN table2
  ON table1.id1=table2.id2

           ******************

               INNER JOIN

sONG_ID     sONG_TITLE          ARTIST_ID
100         DANCING QUEEN         04
101         IMAGINE		  02
102         I WILL SURVIVE        01
103         ROLLING IN THE DEEP   06
104         RESPECT               03
105         MAMMA MIA             04

ARTIST_ID     ARTIST_NAME        
01            GLORIA GAYNOR
02            JOHN LENNON
03            ARETHA FRANKLIN
04            ABBA
05            MICHAEL JACKSON.  

Let’s see how SQL JOINs work in a simple example. Suppose we want to find 
out which artist recorded a certain song. In this basic data model, there 
are only two tables: song and artist. The song table contains the columns 
song_id, song_title and artist_id. The artist table consists of artist_id and
artist_name. As we can see, artist_id is in both tables; we can use it to join them.

The simplest JOIN (also called an INNER JOIN) takes the left table and matches 
information for each row from the right table using artist_id. Thus, the first song, 
“Dancing Queen”, has an artist_id equal to “04”; in  the artist table, “04” is assigned 
to “ABBA”.

As you can see in the artist table, there is no artist_id equal to “06”, which is 
assigned to the song “Rolling in the Deep”. In the result table, only songs matched 
with an artist_name are shown. There also aren’t any Michael Jackson songs in the result 
table, as there is no such song in the song table.

Remember that INNER JOIN selects all rows from both tables as long as there is a match between the columns in both tables.


Here’s the code:

SELECT *
FROM song
JOIN artist
  ON song.artist_id=artist.artist_id


sONG_ID     sONG_TITLE          ARTIST_ID
100         DANCING QUEEN         04
101         IMAGINE		  02
102         I WILL SURVIVE        01
103         ROLLING IN THE DEEP   06
104         RESPECT               03
105         MAMMA MIA             04

              +

ARTIST_ID     ARTIST_NAME 
04            ABBA
02            JOHN LENNON
01            GLORIA GAYNOR
03            ARETHA FRANKLIN
04            ABBA


           **********************
                 LEFT JOIN

The second type of join is the LEFT JOIN. It always takes the first table (meaning the
table just after the FROM keyword) as a whole (all the records in the first table). It 
takes only matching records from the second table. If there is no matching information, 
a NULL value is returned. This means that there is no information available for that 
particular ID.

Take another look at the artist table. There is no artist_name with an artist_id equal 
to “06”. This is why the song “Rolling in the deep” did not occur in the INNER JOIN query
result. While it is listed in the LEFT JOIN example below, it has NULL values for artist_id 
and artist_name.

Here’s the SQL LEFT JOIN statement:

SELECT *
FROM song
LEFT JOIN artist
  ON song.artist_id=artist.artist_id

sONG_ID     sONG_TITLE          ARTIST_ID
100         DANCING QUEEN         04
101         IMAGINE		  02
102         I WILL SURVIVE        01
103         ROLLING IN THE DEEP   06
104         RESPECT               03
105         MAMMA MIA             04

              +

ARTIST_ID     ARTIST_NAME 
04            ABBA
02            JOHN LENNON
01            GLORIA GAYNOR
NULL NULL
03            ARETHA FRANKLIN
04            ABBA


            **************************
                 
                   RIGHT JOIN

The next type of join is the RIGHT JOIN. Unlike LEFT JOIN, it takes all the records
from the second table (the one immediately after the JOIN keyword) and only those records 
from the first table that have matching artist_ids. In this case, there are no Michael Jackson 
songs in the database, so there are NULLs placed for those song_ids, song_titles and artist_ids. 
And now “Rolling in the deep” has disappeared, as in the right (artist) table there is no artist_id equal to “06”.

Here’s the code:

SELECT *
FROM song
RIGHT JOIN artist
  ON song.artist_id=artist.artist_id


sONG_ID     sONG_TITLE          ARTIST_ID
100         DANCING QUEEN         04
101         IMAGINE		  02
102         I WILL SURVIVE        01
104         RESPECT               03
105         MAMMA MIA             04
NULL        NULL                  NULL
              +

ARTIST_ID     ARTIST_NAME 
04            ABBA
02            JOHN LENNON
01            GLORIA GAYNOR
03            ARETHA FRANKLIN
04            ABBA
05            MICHAEL JACKSON. 

             *************************

                  FULL JOIN

The last type of JOIN is the FULL JOIN. It is a combination of LEFT JOIN and RIGHT JOIN, 
as it takes all the records from both tables and places NULL values where the information 
from the matching table is missing. In the example below, you can see NULLs for artist_id equal 
to “06” (yes, it should be Adele!) and NULLs for Michael Jackson songs with artist_id equal to “05”.
(Yes, “Billie Jean” exists, but SQL does not know it!)

SELECT *
FROM song
FULL JOIN artist
  ON song.artist_id=artist.artist_id

sONG_ID     sONG_TITLE          ARTIST_ID
100         DANCING QUEEN         04
101         IMAGINE		  02
102         I WILL SURVIVE        01
103         ROLLING IN THE DEEP   06
104         RESPECT               03
105         MAMMA MIA             04
NULL        NULL                  NULL

              +

ARTIST_ID     ARTIST_NAME 
04            ABBA
02            JOHN LENNON
01            GLORIA GAYNOR
NULL          NULL
03            ARETHA FRANKLIN
04            ABBA
05            MICHAEL JACKSON. 
  

